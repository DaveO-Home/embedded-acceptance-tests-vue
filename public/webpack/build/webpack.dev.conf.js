/* Generated by vue cli */
const path = require("path");
const { VueLoaderPlugin } = require("vue-loader");
const CaseSensitivePathsPlugin = require("case-sensitive-paths-webpack-plugin");
const CopyWebpackPlugin = require("copy-webpack-plugin");
const FriendlyErrorsWebpackPlugin = require("friendly-errors-webpack-plugin");
const { DefinePlugin, ProgressPlugin } = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const PreloadPlugin = require("preload-webpack-plugin");
const rules = require("./dev_rules");

const isWatch = process.env.USE_WATCH === "true";

function resolve(dir) {
  return path.join(__dirname, "..", dir);
}
module.exports = {
  mode: "development",
  stats: {
    errorDetails: true,
    colors: true,
    warnings: false,
    modules: false
  },
  context: resolve("."), //path.resolve(__dirname),
  // devtool: "source-map",
  node: false,
  output: {
    path: path.resolve(__dirname, "../..", "dist_test/webpack"),
    filename: "js/[name].js",
    publicPath: "../",
    chunkFilename: "js/[name].js"
  },
  target: "web",
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "../appl"),
      "vue$": "vue/dist/vue.esm-bundler.js",
      app: resolve("appl/js/app.js"),
      basecontrol: resolve("appl/js/utils/base.control"),
      config: resolve("appl/js/config"),
      default: resolve("appl/js/utils/default"),
      helpers: resolve("appl/js/utils/helpers"),
      menu: resolve("appl/js/utils/menu.js"),
      pdf: resolve("appl/js/controller/pdf"),
      router: resolve("appl/router"),
      start: resolve("appl/js/controller/start"),
      setup: resolve("appl/js/utils/setup"),
      setglobals: resolve("appl/js/utils/set.globals"),
      table: resolve("appl/js/controller/table"),
      tablepager: "tablesorter/dist/js/extras/jquery.tablesorter.pager.min.js",
      tablewidgets: "tablesorter/dist/js/jquery.tablesorter.widgets.min.js",
      apptests: resolve("tests/apptest"),
      contacttests: resolve("tests/contacttest"),
      domtests: resolve("tests/domtest"),
      logintests: resolve("tests/logintest"),
      routertests: resolve("tests/routertest"),
      toolstests: resolve("tests/toolstest"),
      dodextests: resolve("tests/dodextest"),
      inputtests: resolve("tests/inputtest"),
      handlebars: "handlebars/dist/handlebars.js"
    },
    extensions: [
      ".mjs",
      ".js",
      ".jsx",
      ".vue",
      ".json",
      ".wasm"
    ],
    modules: [
      "node_modules",
      path.resolve(__dirname, "../..", "node_modules"),
      path.resolve(__dirname, "../..", "node_modules/@vue/cli-service/node_modules")
    ],
    // plugins: [
    //   /* config.resolve.plugin("pnp") */
    //   {}
    // ]
  },
  resolveLoader: {
    modules: [
      "node_modules",
      path.resolve(__dirname, "../..", "node_modules"),
      path.resolve(__dirname, "../..", "node_modules/@vue/cli-service/node_modules")
    ],
    // plugins: [
    //   /* config.resolve.plugin("pnp-loaders") */
    //   {}
    // ]
  },
  module: {
    exprContextCritical: false,
    noParse: /^(vue|vue-router|vuex|vuex-router-sync|dodex(.?))$/,
    rules: rules
  },
  plugins: [
    /* config.plugin("vue-loader") */
    new VueLoaderPlugin(),
    /* config.plugin("feature-flags") */
    new DefinePlugin(
      {
        __VUE_OPTIONS_API__: "true",
        __VUE_PROD_DEVTOOLS__: "false"
      }
    ),
    /* config.plugin("define") */
    new DefinePlugin(
      {
        "process.env": {
          NODE_ENV: "\"development\"",
          BASE_URL: "\"/\""
        }
      }
    ),
    /* config.plugin("case-sensitive-paths") */
    new CaseSensitivePathsPlugin(),
    /* config.plugin("friendly-errors") */
    new FriendlyErrorsWebpackPlugin(),
    /* config.plugin("html") */
    new HtmlWebpackPlugin(
      {
        title: "embedded-acceptance-tests-vue",
        template: path.resolve(__dirname, "..", "appl/testapp_dev.html"),
        filename: "./appl/testapp_dev.html"
      }
    ),
    /* config.plugin("preload") */
    new PreloadPlugin(
      {
        rel: "preload",
        include: "initial",
        fileBlacklist: [
          /\.map$/,
          /hot-update\.js$/
        ]
      }
    ),
    /* config.plugin("prefetch") */
    new PreloadPlugin(
      {
        rel: "prefetch",
        include: "asyncChunks"
      }
    ),
    new CopyWebpackPlugin({ patterns: [
      { from: "./appl/index.html", to: "" },
      { from: "./appl/index.html", to: "./appl" },
      // {
      //   from: path.resolve(__dirname, "../static"),
      //   globOptions: {
      //     dot: false
      //   },
      //   to: ""
      // },
      { from: "../README.md", to: "../" },
      {
        from: "./appl/templates/**/*",
        globOptions: { 
          dot: false
        },
        to: ""
      },
      {
        from: "./appl/views/**/*", 
        to: ""
      },
      {
        from: "./appl/dodex/**/*",
        globOptions: { 
          dot: false
        },
        to: ""
      },
      {
        from: "./images/**/*",
        globOptions: { 
          dot: false
        },
        to: ""
      }
    ]}),
    new ProgressPlugin()
  ],
  watch: isWatch,
    watchOptions: {
        ignored: /node_modules/
  },
  entry: {
    app: [
      "./appl/main.js"
    ]
  }
}
